/**
 * FastAPI
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { CategoryMetadata } from '../model/categoryMetadata';
// @ts-ignore
import { ContainsMessage } from '../model/containsMessage';
// @ts-ignore
import { ControlNetModelRecordInput } from '../model/controlNetModelRecordInput';
// @ts-ignore
import { ControlNetModelRecordOutput } from '../model/controlNetModelRecordOutput';
// @ts-ignore
import { ErrorResponse } from '../model/errorResponse';
// @ts-ignore
import { HTTPValidationError } from '../model/hTTPValidationError';
// @ts-ignore
import { HordeModelReferenceServiceV1RoutersMetadataCategoryLastUpdatedResponse } from '../model/hordeModelReferenceServiceV1RoutersMetadataCategoryLastUpdatedResponse';
// @ts-ignore
import { HordeModelReferenceServiceV1RoutersMetadataLastUpdatedResponse } from '../model/hordeModelReferenceServiceV1RoutersMetadataLastUpdatedResponse';
// @ts-ignore
import { ImageGenerationModelRecordInput } from '../model/imageGenerationModelRecordInput';
// @ts-ignore
import { ImageGenerationModelRecordOutput } from '../model/imageGenerationModelRecordOutput';
// @ts-ignore
import { MODEL_REFERENCE_CATEGORY } from '../model/mODELREFERENCECATEGORY';
// @ts-ignore
import { NewModelRecord } from '../model/newModelRecord';
// @ts-ignore
import { ResponseCreateV2Model } from '../model/responseCreateV2Model';
// @ts-ignore
import { ResponseReadV2ReferenceValue } from '../model/responseReadV2ReferenceValue';
// @ts-ignore
import { ResponseUpdateV2Model } from '../model/responseUpdateV2Model';
// @ts-ignore
import { TextGenerationModelRecordInput } from '../model/textGenerationModelRecordInput';
// @ts-ignore
import { TextGenerationModelRecordOutput } from '../model/textGenerationModelRecordOutput';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { BaseService } from '../api.base.service';

@Injectable({
  providedIn: 'root',
})
export class V2Service extends BaseService {
  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration?: Configuration,
  ) {
    super(basePath, configuration);
  }

  /**
   * Create a new ControlNet model in v2 format
   * Create a new ControlNet model in v2 format.  ⚠️ **This endpoint is only available when &#x60;canonical_format&#x3D;\&#39;v2\&#39;&#x60; in PRIMARY mode.**  The model name in the request body must not already exist in the ControlNet category.
   * @param controlNetModelRecordInput
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createV2ControlnetModel(
    controlNetModelRecordInput: ControlNetModelRecordInput,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<ControlNetModelRecordOutput>;
  public createV2ControlnetModel(
    controlNetModelRecordInput: ControlNetModelRecordInput,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<ControlNetModelRecordOutput>>;
  public createV2ControlnetModel(
    controlNetModelRecordInput: ControlNetModelRecordInput,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<ControlNetModelRecordOutput>>;
  public createV2ControlnetModel(
    controlNetModelRecordInput: ControlNetModelRecordInput,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (controlNetModelRecordInput === null || controlNetModelRecordInput === undefined) {
      throw new Error(
        'Required parameter controlNetModelRecordInput was null or undefined when calling createV2ControlnetModel.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/controlnet/create_model`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<ControlNetModelRecordOutput>(
      'post',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: controlNetModelRecordInput,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Create a new image generation model in v2 format
   * Create a new image generation model in v2 format.  ⚠️ **This endpoint is only available when &#x60;canonical_format&#x3D;\&#39;v2\&#39;&#x60; in PRIMARY mode.**  The model name in the request body must not already exist in the image generation category.
   * @param imageGenerationModelRecordInput
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createV2ImageGenerationModel(
    imageGenerationModelRecordInput: ImageGenerationModelRecordInput,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<ImageGenerationModelRecordOutput>;
  public createV2ImageGenerationModel(
    imageGenerationModelRecordInput: ImageGenerationModelRecordInput,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<ImageGenerationModelRecordOutput>>;
  public createV2ImageGenerationModel(
    imageGenerationModelRecordInput: ImageGenerationModelRecordInput,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<ImageGenerationModelRecordOutput>>;
  public createV2ImageGenerationModel(
    imageGenerationModelRecordInput: ImageGenerationModelRecordInput,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (imageGenerationModelRecordInput === null || imageGenerationModelRecordInput === undefined) {
      throw new Error(
        'Required parameter imageGenerationModelRecordInput was null or undefined when calling createV2ImageGenerationModel.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/image_generation/create_model`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<ImageGenerationModelRecordOutput>(
      'post',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: imageGenerationModelRecordInput,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Create a new model in v2 format
   * Create a new model in the specified category.  ⚠️ **This endpoint is only available when &#x60;canonical_format&#x3D;\&#39;v2\&#39;&#x60; in PRIMARY mode.**  The model name in the request body must not already exist in the specified category.
   * @param modelCategoryName
   * @param newModelRecord
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createV2Model(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    newModelRecord: NewModelRecord,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<ResponseCreateV2Model>;
  public createV2Model(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    newModelRecord: NewModelRecord,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<ResponseCreateV2Model>>;
  public createV2Model(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    newModelRecord: NewModelRecord,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<ResponseCreateV2Model>>;
  public createV2Model(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    newModelRecord: NewModelRecord,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (modelCategoryName === null || modelCategoryName === undefined) {
      throw new Error(
        'Required parameter modelCategoryName was null or undefined when calling createV2Model.',
      );
    }
    if (newModelRecord === null || newModelRecord === undefined) {
      throw new Error(
        'Required parameter newModelRecord was null or undefined when calling createV2Model.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/${this.configuration.encodeParam({ name: 'modelCategoryName', value: modelCategoryName, in: 'path', style: 'simple', explode: false, dataType: 'MODEL_REFERENCE_CATEGORY', dataFormat: undefined })}/add`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<ResponseCreateV2Model>('post', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: newModelRecord,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Create a new text generation model in v2 format
   * Create a new text generation model in v2 format.  ⚠️ **This endpoint is only available when &#x60;canonical_format&#x3D;\&#39;v2\&#39;&#x60; in PRIMARY mode.**  The model name in the request body must not already exist in the text generation category.
   * @param textGenerationModelRecordInput
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createV2TextGenerationModel(
    textGenerationModelRecordInput: TextGenerationModelRecordInput,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<TextGenerationModelRecordOutput>;
  public createV2TextGenerationModel(
    textGenerationModelRecordInput: TextGenerationModelRecordInput,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<TextGenerationModelRecordOutput>>;
  public createV2TextGenerationModel(
    textGenerationModelRecordInput: TextGenerationModelRecordInput,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<TextGenerationModelRecordOutput>>;
  public createV2TextGenerationModel(
    textGenerationModelRecordInput: TextGenerationModelRecordInput,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (textGenerationModelRecordInput === null || textGenerationModelRecordInput === undefined) {
      throw new Error(
        'Required parameter textGenerationModelRecordInput was null or undefined when calling createV2TextGenerationModel.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/text_generation/create_model`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<TextGenerationModelRecordOutput>(
      'post',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: textGenerationModelRecordInput,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Delete a v2 model entry
   * Delete a model from a v2 model reference category.  ⚠️ **This endpoint is only available when &#x60;canonical_format&#x3D;\&#39;v2\&#39;&#x60; in PRIMARY mode.**  Permanently removes the specified model from the category.
   * @param modelCategoryName
   * @param modelName
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteV2Model(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    modelName: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any>;
  public deleteV2Model(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    modelName: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<any>>;
  public deleteV2Model(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    modelName: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<any>>;
  public deleteV2Model(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    modelName: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (modelCategoryName === null || modelCategoryName === undefined) {
      throw new Error(
        'Required parameter modelCategoryName was null or undefined when calling deleteV2Model.',
      );
    }
    if (modelName === null || modelName === undefined) {
      throw new Error(
        'Required parameter modelName was null or undefined when calling deleteV2Model.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/${this.configuration.encodeParam({ name: 'modelCategoryName', value: modelCategoryName, in: 'path', style: 'simple', explode: false, dataType: 'MODEL_REFERENCE_CATEGORY', dataFormat: undefined })}/${this.configuration.encodeParam({ name: 'modelName', value: modelName, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<any>('delete', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Get all v2 format metadata
   * Get all v2 format metadata.  Returns a dictionary mapping each category to its v2 format metadata.  Args:     manager: The model reference manager dependency.  Returns:     Dict of category to CategoryMetadata.  Raises:     HTTPException: 503 if metadata is not supported.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readAllV2Metadata(
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<{ [key: string]: CategoryMetadata }>;
  public readAllV2Metadata(
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<{ [key: string]: CategoryMetadata }>>;
  public readAllV2Metadata(
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<{ [key: string]: CategoryMetadata }>>;
  public readAllV2Metadata(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/metadata/metadata`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<{ [key: string]: CategoryMetadata }>(
      'get',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Get all v2 format metadata
   * Get all v2 format metadata.  Returns a dictionary mapping each category to its v2 format metadata.  Args:     manager: The model reference manager dependency.  Returns:     Dict of category to CategoryMetadata.  Raises:     HTTPException: 503 if metadata is not supported.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readAllV2Metadata_1(
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<{ [key: string]: CategoryMetadata }>;
  public readAllV2Metadata_1(
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<{ [key: string]: CategoryMetadata }>>;
  public readAllV2Metadata_1(
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<{ [key: string]: CategoryMetadata }>>;
  public readAllV2Metadata_1(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/metadata/metadata`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<{ [key: string]: CategoryMetadata }>(
      'get',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Get last update timestamp for a specific category (v2)
   * Get the last update timestamp for a specific category (v2 format).  Args:     model_category_name: The model reference category to get metadata for.     manager: The model reference manager dependency.  Returns:     CategoryLastUpdatedResponse with the timestamp, or None if no metadata exists.  Raises:     HTTPException: 503 if metadata is not supported.     HTTPException: 404 if category has no metadata.
   * @param modelCategoryName
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readV2CategoryLastUpdated(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HordeModelReferenceServiceV1RoutersMetadataCategoryLastUpdatedResponse>;
  public readV2CategoryLastUpdated(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<
    HttpResponse<HordeModelReferenceServiceV1RoutersMetadataCategoryLastUpdatedResponse>
  >;
  public readV2CategoryLastUpdated(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<HordeModelReferenceServiceV1RoutersMetadataCategoryLastUpdatedResponse>>;
  public readV2CategoryLastUpdated(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (modelCategoryName === null || modelCategoryName === undefined) {
      throw new Error(
        'Required parameter modelCategoryName was null or undefined when calling readV2CategoryLastUpdated.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/metadata/${this.configuration.encodeParam({ name: 'modelCategoryName', value: modelCategoryName, in: 'path', style: 'simple', explode: false, dataType: 'MODEL_REFERENCE_CATEGORY', dataFormat: undefined })}/last_updated`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<HordeModelReferenceServiceV1RoutersMetadataCategoryLastUpdatedResponse>(
      'get',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Get last update timestamp for a specific category (v2)
   * Get the last update timestamp for a specific category (v2 format).  Args:     model_category_name: The model reference category to get metadata for.     manager: The model reference manager dependency.  Returns:     CategoryLastUpdatedResponse with the timestamp, or None if no metadata exists.  Raises:     HTTPException: 503 if metadata is not supported.     HTTPException: 404 if category has no metadata.
   * @param modelCategoryName
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readV2CategoryLastUpdated_2(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HordeModelReferenceServiceV1RoutersMetadataCategoryLastUpdatedResponse>;
  public readV2CategoryLastUpdated_2(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<
    HttpResponse<HordeModelReferenceServiceV1RoutersMetadataCategoryLastUpdatedResponse>
  >;
  public readV2CategoryLastUpdated_2(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<HordeModelReferenceServiceV1RoutersMetadataCategoryLastUpdatedResponse>>;
  public readV2CategoryLastUpdated_2(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (modelCategoryName === null || modelCategoryName === undefined) {
      throw new Error(
        'Required parameter modelCategoryName was null or undefined when calling readV2CategoryLastUpdated_2.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/metadata/${this.configuration.encodeParam({ name: 'modelCategoryName', value: modelCategoryName, in: 'path', style: 'simple', explode: false, dataType: 'MODEL_REFERENCE_CATEGORY', dataFormat: undefined })}/last_updated`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<HordeModelReferenceServiceV1RoutersMetadataCategoryLastUpdatedResponse>(
      'get',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Get v2 format metadata for a specific category
   * Get v2 format metadata for a specific category.  Args:     model_category_name: The model reference category to get metadata for.     manager: The model reference manager dependency.  Returns:     CategoryMetadata for the category.  Raises:     HTTPException: 503 if metadata is not supported.     HTTPException: 404 if category has no metadata.
   * @param modelCategoryName
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readV2CategoryMetadata(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<CategoryMetadata>;
  public readV2CategoryMetadata(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<CategoryMetadata>>;
  public readV2CategoryMetadata(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<CategoryMetadata>>;
  public readV2CategoryMetadata(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (modelCategoryName === null || modelCategoryName === undefined) {
      throw new Error(
        'Required parameter modelCategoryName was null or undefined when calling readV2CategoryMetadata.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/metadata/${this.configuration.encodeParam({ name: 'modelCategoryName', value: modelCategoryName, in: 'path', style: 'simple', explode: false, dataType: 'MODEL_REFERENCE_CATEGORY', dataFormat: undefined })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<CategoryMetadata>('get', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Get v2 format metadata for a specific category
   * Get v2 format metadata for a specific category.  Args:     model_category_name: The model reference category to get metadata for.     manager: The model reference manager dependency.  Returns:     CategoryMetadata for the category.  Raises:     HTTPException: 503 if metadata is not supported.     HTTPException: 404 if category has no metadata.
   * @param modelCategoryName
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readV2CategoryMetadata_3(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<CategoryMetadata>;
  public readV2CategoryMetadata_3(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<CategoryMetadata>>;
  public readV2CategoryMetadata_3(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<CategoryMetadata>>;
  public readV2CategoryMetadata_3(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (modelCategoryName === null || modelCategoryName === undefined) {
      throw new Error(
        'Required parameter modelCategoryName was null or undefined when calling readV2CategoryMetadata_3.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/metadata/${this.configuration.encodeParam({ name: 'modelCategoryName', value: modelCategoryName, in: 'path', style: 'simple', explode: false, dataType: 'MODEL_REFERENCE_CATEGORY', dataFormat: undefined })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<CategoryMetadata>('get', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Get last update timestamp for canonical format (v2)
   * Get the last update timestamp for the canonical format.  This endpoint returns the maximum last_updated timestamp across all categories for v2 format operations. Only available when canonical_format&#x3D;\&#39;v2\&#39;.  Returns:     LastUpdatedResponse with the maximum timestamp, or None if no metadata exists.  Raises:     HTTPException: 503 if metadata is not supported or canonical_format !&#x3D; \&#39;v2\&#39;.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readV2LastUpdated(
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HordeModelReferenceServiceV1RoutersMetadataLastUpdatedResponse>;
  public readV2LastUpdated(
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<HordeModelReferenceServiceV1RoutersMetadataLastUpdatedResponse>>;
  public readV2LastUpdated(
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<HordeModelReferenceServiceV1RoutersMetadataLastUpdatedResponse>>;
  public readV2LastUpdated(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/metadata/last_updated`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<HordeModelReferenceServiceV1RoutersMetadataLastUpdatedResponse>(
      'get',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Get last update timestamp for canonical format (v2)
   * Get the last update timestamp for the canonical format.  This endpoint returns the maximum last_updated timestamp across all categories for v2 format operations. Only available when canonical_format&#x3D;\&#39;v2\&#39;.  Returns:     LastUpdatedResponse with the maximum timestamp, or None if no metadata exists.  Raises:     HTTPException: 503 if metadata is not supported or canonical_format !&#x3D; \&#39;v2\&#39;.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readV2LastUpdated_4(
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HordeModelReferenceServiceV1RoutersMetadataLastUpdatedResponse>;
  public readV2LastUpdated_4(
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<HordeModelReferenceServiceV1RoutersMetadataLastUpdatedResponse>>;
  public readV2LastUpdated_4(
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<HordeModelReferenceServiceV1RoutersMetadataLastUpdatedResponse>>;
  public readV2LastUpdated_4(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/metadata/last_updated`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<HordeModelReferenceServiceV1RoutersMetadataLastUpdatedResponse>(
      'get',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Get a specific v2 model reference by category name
   * Get all models in a specific v2 model reference category.  Returns the complete v2 format JSON for the requested category.
   * @param modelCategoryName
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readV2Reference(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<{ [key: string]: ResponseReadV2ReferenceValue }>;
  public readV2Reference(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<{ [key: string]: ResponseReadV2ReferenceValue }>>;
  public readV2Reference(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<{ [key: string]: ResponseReadV2ReferenceValue }>>;
  public readV2Reference(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (modelCategoryName === null || modelCategoryName === undefined) {
      throw new Error(
        'Required parameter modelCategoryName was null or undefined when calling readV2Reference.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/${this.configuration.encodeParam({ name: 'modelCategoryName', value: modelCategoryName, in: 'path', style: 'simple', explode: false, dataType: 'MODEL_REFERENCE_CATEGORY', dataFormat: undefined })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<{ [key: string]: ResponseReadV2ReferenceValue }>(
      'get',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Get info about the v2 model reference API
   * Get information about the v2 model reference API.  This is the v2 model reference API, which uses the new format established by horde_model_reference.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readV2ReferenceApiInfo(
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<ContainsMessage>;
  public readV2ReferenceApiInfo(
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<ContainsMessage>>;
  public readV2ReferenceApiInfo(
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<ContainsMessage>>;
  public readV2ReferenceApiInfo(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/info`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<ContainsMessage>('get', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Get all v2 model reference names
   * Get all available v2 model reference category names.  Returns a list of all model categories that have v2 format references available.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readV2ReferencesNames(
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<Array<MODEL_REFERENCE_CATEGORY>>;
  public readV2ReferencesNames(
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<Array<MODEL_REFERENCE_CATEGORY>>>;
  public readV2ReferencesNames(
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<Array<MODEL_REFERENCE_CATEGORY>>>;
  public readV2ReferencesNames(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/model_categories`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<Array<MODEL_REFERENCE_CATEGORY>>(
      'get',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Get a specific model by category and name
   * Get a specific model by category and name.  Args:     model_category_name: The model reference category (e.g., image_generation).     model_name: The name of the model within the category.     manager: The model reference manager dependency.  Returns:     JSONResponse: The model record data.  Raises:     HTTPException: 404 if category or model not found.
   * @param modelCategoryName
   * @param modelName
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readV2SingleModel(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    modelName: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<{ [key: string]: any }>;
  public readV2SingleModel(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    modelName: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<{ [key: string]: any }>>;
  public readV2SingleModel(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    modelName: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<{ [key: string]: any }>>;
  public readV2SingleModel(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    modelName: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (modelCategoryName === null || modelCategoryName === undefined) {
      throw new Error(
        'Required parameter modelCategoryName was null or undefined when calling readV2SingleModel.',
      );
    }
    if (modelName === null || modelName === undefined) {
      throw new Error(
        'Required parameter modelName was null or undefined when calling readV2SingleModel.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/${this.configuration.encodeParam({ name: 'modelCategoryName', value: modelCategoryName, in: 'path', style: 'simple', explode: false, dataType: 'MODEL_REFERENCE_CATEGORY', dataFormat: undefined })}/${this.configuration.encodeParam({ name: 'modelName', value: modelName, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<{ [key: string]: any }>('get', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Update an existing model in v2 format
   * Update an existing model in v2 format.  ⚠️ **This endpoint is only available when &#x60;canonical_format&#x3D;\&#39;v2\&#39;&#x60; in PRIMARY mode.**  The model must already exist in the specified category. Use POST to create new models.  - Preserves original &#x60;created_at&#x60; and &#x60;created_by&#x60; metadata - Updates &#x60;updated_at&#x60; timestamp
   * @param modelCategoryName
   * @param modelName
   * @param newModelRecord
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateV2Model(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    modelName: string,
    newModelRecord: NewModelRecord,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<ResponseUpdateV2Model>;
  public updateV2Model(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    modelName: string,
    newModelRecord: NewModelRecord,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<ResponseUpdateV2Model>>;
  public updateV2Model(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    modelName: string,
    newModelRecord: NewModelRecord,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<ResponseUpdateV2Model>>;
  public updateV2Model(
    modelCategoryName: MODEL_REFERENCE_CATEGORY,
    modelName: string,
    newModelRecord: NewModelRecord,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (modelCategoryName === null || modelCategoryName === undefined) {
      throw new Error(
        'Required parameter modelCategoryName was null or undefined when calling updateV2Model.',
      );
    }
    if (modelName === null || modelName === undefined) {
      throw new Error(
        'Required parameter modelName was null or undefined when calling updateV2Model.',
      );
    }
    if (newModelRecord === null || newModelRecord === undefined) {
      throw new Error(
        'Required parameter newModelRecord was null or undefined when calling updateV2Model.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v2/${this.configuration.encodeParam({ name: 'modelCategoryName', value: modelCategoryName, in: 'path', style: 'simple', explode: false, dataType: 'MODEL_REFERENCE_CATEGORY', dataFormat: undefined })}/${this.configuration.encodeParam({ name: 'modelName', value: modelName, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<ResponseUpdateV2Model>('put', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: newModelRecord,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }
}
