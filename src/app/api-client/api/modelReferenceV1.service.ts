/**
 * FastAPI
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { ContainsMessage } from '../model/containsMessage';
// @ts-ignore
import { HTTPValidationError } from '../model/hTTPValidationError';
// @ts-ignore
import { MODELREFERENCECATEGORY } from '../model/mODELREFERENCECATEGORY';
// @ts-ignore
import { ModelCategoryName } from '../model/modelCategoryName';
// @ts-ignore
import { ReadLegacyReferenceNamesModelReferencesV1ModelCategoriesGet200ResponseInner } from '../model/readLegacyReferenceNamesModelReferencesV1ModelCategoriesGet200ResponseInner';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { BaseService } from '../api.base.service';

@Injectable({
  providedIn: 'root',
})
export class ModelReferenceV1Service extends BaseService {
  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration?: Configuration,
  ) {
    super(basePath, configuration);
  }

  /**
   * Create Legacy Model
   * Create a new model in legacy format.  This endpoint is only available when canonical_format&#x3D;\&#39;legacy\&#39; in PRIMARY mode.  Args:     model_category_name: The model reference category.     model_name: The name of the model to create. Must match the \&#39;name\&#39; field in request body.     request_body: The model record data in legacy format.     manager: The model reference manager dependency.  Returns:     JSONResponse: The created model record data.  Raises:     HTTPException: 400 for invalid requests, 409 if model exists, 503 if not in legacy mode.
   * @param modelCategoryName
   * @param modelName
   * @param requestBody
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createLegacyModelModelReferencesV1ModelCategoryNameModelNamePost(
    modelCategoryName: MODELREFERENCECATEGORY,
    modelName: string,
    requestBody: { [key: string]: any },
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any>;
  public createLegacyModelModelReferencesV1ModelCategoryNameModelNamePost(
    modelCategoryName: MODELREFERENCECATEGORY,
    modelName: string,
    requestBody: { [key: string]: any },
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<any>>;
  public createLegacyModelModelReferencesV1ModelCategoryNameModelNamePost(
    modelCategoryName: MODELREFERENCECATEGORY,
    modelName: string,
    requestBody: { [key: string]: any },
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<any>>;
  public createLegacyModelModelReferencesV1ModelCategoryNameModelNamePost(
    modelCategoryName: MODELREFERENCECATEGORY,
    modelName: string,
    requestBody: { [key: string]: any },
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (modelCategoryName === null || modelCategoryName === undefined) {
      throw new Error(
        'Required parameter modelCategoryName was null or undefined when calling createLegacyModelModelReferencesV1ModelCategoryNameModelNamePost.',
      );
    }
    if (modelName === null || modelName === undefined) {
      throw new Error(
        'Required parameter modelName was null or undefined when calling createLegacyModelModelReferencesV1ModelCategoryNameModelNamePost.',
      );
    }
    if (requestBody === null || requestBody === undefined) {
      throw new Error(
        'Required parameter requestBody was null or undefined when calling createLegacyModelModelReferencesV1ModelCategoryNameModelNamePost.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v1/${this.configuration.encodeParam({ name: 'modelCategoryName', value: modelCategoryName, in: 'path', style: 'simple', explode: false, dataType: 'MODELREFERENCECATEGORY', dataFormat: undefined })}/${this.configuration.encodeParam({ name: 'modelName', value: modelName, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<any>('post', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: requestBody,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Delete Legacy Model
   * Delete a model from legacy format files.  This endpoint is only available when canonical_format&#x3D;\&#39;legacy\&#39; in PRIMARY mode.  Args:     model_category_name: The model reference category.     model_name: The name of the model to delete.     manager: The model reference manager dependency.  Returns:     Response: 204 No Content on success.  Raises:     HTTPException: 404 if model not found, 503 if not in legacy mode.
   * @param modelCategoryName
   * @param modelName
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteLegacyModelModelReferencesV1ModelCategoryNameModelNameDelete(
    modelCategoryName: MODELREFERENCECATEGORY,
    modelName: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any>;
  public deleteLegacyModelModelReferencesV1ModelCategoryNameModelNameDelete(
    modelCategoryName: MODELREFERENCECATEGORY,
    modelName: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<any>>;
  public deleteLegacyModelModelReferencesV1ModelCategoryNameModelNameDelete(
    modelCategoryName: MODELREFERENCECATEGORY,
    modelName: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<any>>;
  public deleteLegacyModelModelReferencesV1ModelCategoryNameModelNameDelete(
    modelCategoryName: MODELREFERENCECATEGORY,
    modelName: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (modelCategoryName === null || modelCategoryName === undefined) {
      throw new Error(
        'Required parameter modelCategoryName was null or undefined when calling deleteLegacyModelModelReferencesV1ModelCategoryNameModelNameDelete.',
      );
    }
    if (modelName === null || modelName === undefined) {
      throw new Error(
        'Required parameter modelName was null or undefined when calling deleteLegacyModelModelReferencesV1ModelCategoryNameModelNameDelete.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v1/${this.configuration.encodeParam({ name: 'modelCategoryName', value: modelCategoryName, in: 'path', style: 'simple', explode: false, dataType: 'MODELREFERENCECATEGORY', dataFormat: undefined })}/${this.configuration.encodeParam({ name: 'modelName', value: modelName, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<any>('delete', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Read Legacy Reference Info
   * Info about the legacy model reference API, as follows.  This is the legacy model reference API, which uses the format originally found at the github repositories, https://github.com/Haidra-Org/AI-Horde-image-model-reference and https://github.com/Haidra-Org/AI-Horde-text-model-reference.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readLegacyReferenceInfoModelReferencesV1InfoGet(
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<ContainsMessage>;
  public readLegacyReferenceInfoModelReferencesV1InfoGet(
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<ContainsMessage>>;
  public readLegacyReferenceInfoModelReferencesV1InfoGet(
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<ContainsMessage>>;
  public readLegacyReferenceInfoModelReferencesV1InfoGet(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v1/info`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<ContainsMessage>('get', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Read Legacy Reference
   * Get a specific legacy model reference by category name.
   * @param modelCategoryName
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readLegacyReferenceModelReferencesV1ModelCategoryNameGet(
    modelCategoryName: ModelCategoryName,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any>;
  public readLegacyReferenceModelReferencesV1ModelCategoryNameGet(
    modelCategoryName: ModelCategoryName,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<any>>;
  public readLegacyReferenceModelReferencesV1ModelCategoryNameGet(
    modelCategoryName: ModelCategoryName,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<any>>;
  public readLegacyReferenceModelReferencesV1ModelCategoryNameGet(
    modelCategoryName: ModelCategoryName,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (modelCategoryName === null || modelCategoryName === undefined) {
      throw new Error(
        'Required parameter modelCategoryName was null or undefined when calling readLegacyReferenceModelReferencesV1ModelCategoryNameGet.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v1/${this.configuration.encodeParam({ name: 'modelCategoryName', value: modelCategoryName, in: 'path', style: 'simple', explode: false, dataType: 'ModelCategoryName', dataFormat: undefined })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<any>('get', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Read Legacy Reference Names
   * Get all legacy model reference names.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public readLegacyReferenceNamesModelReferencesV1ModelCategoriesGet(
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<Array<ReadLegacyReferenceNamesModelReferencesV1ModelCategoriesGet200ResponseInner>>;
  public readLegacyReferenceNamesModelReferencesV1ModelCategoriesGet(
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<
    HttpResponse<Array<ReadLegacyReferenceNamesModelReferencesV1ModelCategoriesGet200ResponseInner>>
  >;
  public readLegacyReferenceNamesModelReferencesV1ModelCategoriesGet(
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<
    HttpEvent<Array<ReadLegacyReferenceNamesModelReferencesV1ModelCategoriesGet200ResponseInner>>
  >;
  public readLegacyReferenceNamesModelReferencesV1ModelCategoriesGet(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v1/model_categories`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<
      Array<ReadLegacyReferenceNamesModelReferencesV1ModelCategoriesGet200ResponseInner>
    >('get', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Update Legacy Model
   * Update an existing model or create if it doesn\&#39;t exist (upsert) in legacy format.  This endpoint is only available when canonical_format&#x3D;\&#39;legacy\&#39; in PRIMARY mode.  Args:     model_category_name: The model reference category.     model_name: The name of the model to update. Must match the \&#39;name\&#39; field in request body.     request_body: The model record data in legacy format.     manager: The model reference manager dependency.  Returns:     JSONResponse: The updated model record data.  Raises:     HTTPException: 400 for invalid requests, 503 if not in legacy mode.
   * @param modelCategoryName
   * @param modelName
   * @param requestBody
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateLegacyModelModelReferencesV1ModelCategoryNameModelNamePut(
    modelCategoryName: MODELREFERENCECATEGORY,
    modelName: string,
    requestBody: { [key: string]: any },
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any>;
  public updateLegacyModelModelReferencesV1ModelCategoryNameModelNamePut(
    modelCategoryName: MODELREFERENCECATEGORY,
    modelName: string,
    requestBody: { [key: string]: any },
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<any>>;
  public updateLegacyModelModelReferencesV1ModelCategoryNameModelNamePut(
    modelCategoryName: MODELREFERENCECATEGORY,
    modelName: string,
    requestBody: { [key: string]: any },
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<any>>;
  public updateLegacyModelModelReferencesV1ModelCategoryNameModelNamePut(
    modelCategoryName: MODELREFERENCECATEGORY,
    modelName: string,
    requestBody: { [key: string]: any },
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (modelCategoryName === null || modelCategoryName === undefined) {
      throw new Error(
        'Required parameter modelCategoryName was null or undefined when calling updateLegacyModelModelReferencesV1ModelCategoryNameModelNamePut.',
      );
    }
    if (modelName === null || modelName === undefined) {
      throw new Error(
        'Required parameter modelName was null or undefined when calling updateLegacyModelModelReferencesV1ModelCategoryNameModelNamePut.',
      );
    }
    if (requestBody === null || requestBody === undefined) {
      throw new Error(
        'Required parameter requestBody was null or undefined when calling updateLegacyModelModelReferencesV1ModelCategoryNameModelNamePut.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/model_references/v1/${this.configuration.encodeParam({ name: 'modelCategoryName', value: modelCategoryName, in: 'path', style: 'simple', explode: false, dataType: 'MODELREFERENCECATEGORY', dataFormat: undefined })}/${this.configuration.encodeParam({ name: 'modelName', value: modelName, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<any>('put', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: requestBody,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }
}
